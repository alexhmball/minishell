https://tiswww.case.edu/php/chet/readline/readline.html#index-rl_005fredisplay

char	*readline (const char *prompt);

   readline will read a line from the terminal and return it, using
   prompt as a prompt.  If prompt is NULL or the empty string, no
   prompt is issued.  The line returned is allocated with malloc(3);
   the caller must free it when finished.  The line returned has the
   final newline removed, so only the text of the line remains.

   readline offers editing capabilities while the user is entering
   the line.  By default, the line editing commands are similar to
   those of emacs.  A vi-style line editing interface is also
   available.

    This manual page describes only the most basic use of readline.
    Much more functionality is available; see The GNU Readline
    Library and The GNU History Library for additional information.

	readline returns the text of the line read.  A blank line returns
    the empty string.  If EOF is encountered while reading a line,
    and the line is empty, NULL is returned.  If an EOF is read with
	a non-empty line, it is treated as a newline.

void	rl_clear_history (void);
	Clear the history list by deleting all of the entries, in the same manner
	as the History library’s clear_history() function. This differs from
	clear_history because it frees private data Readline saves in the history list.

int		rl_on_new_line (void);
	Tell the update functions that we have moved onto a new (empty) line,
	usually after outputting a newline.

void	rl_replace_line (const char *text, int clear_undo);
	Replace the contents of rl_line_buffer with text. The point and mark are preserved,
	if possible. If clear_undo is non-zero, the undo list associated with the current line is cleared.

void	rl_redisplay (void)
	Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

void	add_history (const char *string)
	Place string at the end of the history list. The associated data field (if any) is set to NULL.
	If the maximum number of history entries has been set using stifle_history(), and the new number
	of history entries would exceed that maximum, the oldest history entry is removed.

int		access(const char *pathname, int mode);

		access() checks whether the calling process can access the file
       pathname.  If pathname is a symbolic link, it is dereferenced.

       The mode specifies the accessibility check(s) to be performed,
       and is either the value F_OK, or a mask consisting of the bitwise
       OR of one or more of R_OK, W_OK, and X_OK.  F_OK tests for the
       existence of the file.  R_OK, W_OK, and X_OK test whether the
       file exists and grants read, write, and execute permissions,
       respectively.

       The check is done using the calling process's real UID and GID,
       rather than the effective IDs as is done when actually attempting
       an operation (e.g., open(2)) on the file.  Similarly, for the
       root user, the check uses the set of permitted capabilities
       rather than the set of effective capabilities; and for non-root
       users, the check uses an empty set of capabilities.

       This allows set-user-ID programs and capability-endowed programs
       to easily determine the invoking user's authority.  In other
       words, access() does not answer the "can I read/write/execute
       this file?" question.  It answers a slightly different question:
       "(assuming I'm a setuid binary) can the user who invoked me
       read/write/execute this file?", which gives set-user-ID programs
       the possibility to prevent malicious users from causing them to
       read files which users shouldn't be able to read.

       If the calling process is privileged (i.e., its real UID is
       zero), then an X_OK check is successful for a regular file if
       execute permission is enabled for any of the file owner, group,
       or other.

       On success (all requested permissions granted, or mode is F_OK
       and the file exists), zero is returned.  On error (at least one
       bit in mode asked for a permission that is denied, or mode is
       F_OK and the file does not exist, or some other error occurred),
       -1 is returned, and errno is set to indicate the error.